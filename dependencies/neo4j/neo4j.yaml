apiVersion: "apps/v1"
kind: Deployment
metadata:
  name: "kubestriker-neo4j-core"
  labels:
    app.kubernetes.io/instance: "tester"
    app.kubernetes.io/name: neo4j
    app.kubernetes.io/component: core
spec:
  serviceName: kubestriker-neo4j
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: "tester"
      app.kubernetes.io/name: neo4j
      app.kubernetes.io/component: core
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: "tester"
        app.kubernetes.io/name: neo4j
        app.kubernetes.io/component: core
    spec:
      # serviceAccountName: tester-neo4j-sa
      # High value permits checkpointing on Neo4j shutdown.  See: https://neo4j.com/developer/kb/checkpointing-and-log-pruning-interactions/
      terminationGracePeriodSeconds: 300
      containers:
      - name: kubestriker-neo4j
        image: "neo4j:4.0"
        imagePullPolicy: "IfNotPresent"
        envFrom:
          - configMapRef:
              name: kubestriker-neo4j-common-config
          - configMapRef:
              name: kubestriker-neo4j-core-config
        env:
          - name: NEO4J_SECRETS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: kubestriker-neo4j-secrets
                key: neo4j-password
        command:
          - "/bin/bash"
          - "-c"
          - |
            export HOST=${HOST:-$(hostname -f)}
            export override_prefix=$(hostname | sed s/-/_/g)
            export core_idx=0
            export NEO4J_AUTH="neo4j/${NEO4J_SECRETS_PASSWORD}"

            # We advertise the discovery-lb addresses (see discovery-lb.yaml) because
            # it is for internal cluster comms and is limited to private ports.
            # See also: https://github.com/neo4j-contrib/neo4j-helm/issues/104
            export NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
            export DISCOVERY_HOST="discovery-tester-neo4j-0.$NAMESPACE.svc.cluster.local"
            export NEO4J_causal__clustering_discovery__advertised__address="$DISCOVERY_HOST:5000"
            export NEO4J_causal__clustering_transaction__advertised__address="$DISCOVERY_HOST:6000"
            export NEO4J_causal__clustering_raft__advertised__address="$DISCOVERY_HOST:7000"
            export NEO4J_dbms_routing_advertised__address=$HOST:7688

            echo "Starting Neo4j CORE $core_idx on $HOST"
            exec /docker-entrypoint.sh "neo4j"
        ports:
        - containerPort: 5000
          name: tcp-discovery
        - containerPort: 7000
          name: tcp-raft
        - containerPort: 6000
          name: tcp-tx
        - containerPort: 7474
          name: tcp-browser
        - containerPort: 7687
          name: tcp-bolt
        - containerPort: 7688
          name: tcp-boltrouting
        - containerPort: 3637
          name: tcp-jmx
        volumeMounts:
        - name: datadir
          mountPath: "/data"
        - name: plugins
          mountPath: /plugins
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 120
          periodSeconds: 10
          tcpSocket:
            port: 7687
          timeoutSeconds: 2
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 300
          periodSeconds: 10
          tcpSocket:
            port: 7687
          timeoutSeconds: 2
        resources:
          {}
      securityContext:
        {}
      volumes:
        - name: plugins
          emptyDir: {}
        - name: datadir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: datadir
        annotations:
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "10Gi"